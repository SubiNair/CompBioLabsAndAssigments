poplist[t+1] = poplist[t] + r * poplist[t] * (k - poplist[t])/k
}
plot(seq(1,gens+1), poplist, xlab = "Generations", ylab = "population")
return(poplist)
}
StochastPop(.1,100,100,10)
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
poplist[t+1] = poplist[t] + r * poplist[t] * (k - poplist[t])/k
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "population")
return(poplist)
}
StochastPop(.1,100,100,10)
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
poplist[t+1] = poplist[t] + r * poplist[t] * (k - poplist[t])/k
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "population", type = "l")
return(poplist)
}
StochastPop(.1,100,100,10)
#Lab12
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
poplist[t+1] = poplist[t] + r * poplist[t] * (k - poplist[t])/k
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
StochastPop(.1,100,100,10)
dpois(100, 10, log = FALSE)
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,100,10)
StochastPop(.1,100,400,10)
StochastPop()
StochastPop()
StochastPop()
StochastPop()
StochastPop()
defaultStochast <- StochastPop()
print(defaultStochast)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
defaultStochast <- StochastPop()
print(defaultStochast)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
defaultStochast <- StochastPop()
print(defaultStochast)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
defaultStochast <- StochastPop()
print(defaultStochast)
ppois(x[1]:x[2], x[1], lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
ppois(x[1]:x[2], x[1], lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
ppois(x[2], x[1], lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
ppois(1, x[1], lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
ppois(x[1], y, lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
ppois(x[1], y, lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
ppois(x[1], y, lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
ppois(x[1], y, lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
ppois(x[1], y, lower.tail = FALSE)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
same <- dpois(x[1], y)
decrease <- increase - same
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
same <- dpois(x[1], y)
decrease <- increase - same
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
same <- dpois(x[1], y)
decrease <- ppois(x[1], y, lower.tail = TRUE) - same
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
same <- dpois(x[1], y)
decrease <- ppois(x[1], y, lower.tail = TRUE) - same
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
same <- dpois(x[1], y)
decrease <- ppois(x[1], y, lower.tail = TRUE) - same
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
#y is the realized n[2] value
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
#The probability of getting the same n[1] value despite the realized
same <- dpois(x[1], y)
#The prob of it being smaller
decrease <- ppois(x[1], y, lower.tail = TRUE) - same
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
#probabilty that n[2] is between 15 and 25 (inclusive)
betval <- dpois(15:25, y)
#Lab12
#We can use rpois
#lambda would be what the original equation gives you at every point
#In other words the changing n
StochastPop <- function(r = 0.1, k = 100, gens = 100, n_init = 10) {
poplist <- rep(0, gens)
poplist[1] <- n_init
for (t in seq(1:(gens-1))) {
nval = poplist[t] + r * poplist[t] * (k - poplist[t])/k
poplist[t+1] <- rpois(1, lambda=nval)
}
plot(seq(1,gens), poplist, xlab = "Generations", ylab = "Abundance", type = "l")
return(poplist)
}
#The plot is contained in the above function
x <- StochastPop()
#x[1] is the initial 10
#lambda needs to be calculated from x[2]
#y is the realized n[2] value
y <- rpois(1, x[2])
increase <- ppois(x[1], y, lower.tail = FALSE)
#The probability of getting the same n[1] value despite the realized
same <- dpois(x[1], y)
#The prob of it being smaller
decrease <- ppois(x[1], y, lower.tail = TRUE) - same
#probabilty that n[2] is between 15 and 25 (inclusive)
betval <- dpois(15:25, y)
print(increase)
print(decrease)
print(same)
print(sum(same,increase,decrease))
print(betval)
setwd(/Users/subi/Desktop/CompBioLabsAndAssignments/Assignment11)
setwd(Users/subi/Desktop/CompBioLabsAndAssignments/Assignment11)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Assignment11")
install.packages("rio")
installed.packages()
library(rio)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Assignment11")
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Assignment11")
library(rio)
convert("Pollen_score_colour.xlsx", "Pollen_score_colour.csv")
convert("Foraging_duration.xlsx", "Foraging_duration.csv")
PollenData <- read.csv("Pollen_score_colour.csv")
ForagingData <- read.csv("Foraging_duration.csv")
pColor <- PollenData$Pollen.Colour
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
print(pColor)
PollenData <- na.omit(PollenData)
PollenData <- PollenData[!grepl("?", PollenData$Pollen.Colour)]
pColor <- PollenData$Pollen.Colour
PollenData <- PollenData[!grepl("?", PollenData$Pollen.Colour)]
pColor <- PollenData$Pollen.Colour
print(pColor)
print(PollenData)
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
PollenData <- read.csv("Pollen_score_colour.csv")
ForagingData <- read.csv("Foraging_duration.csv")
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
print(pColor)
PollenData <- read.csv("Pollen_score_colour.csv")
ForagingData <- read.csv("Foraging_duration.csv")
PollenData$Pollen.Score <- gsub("?",NA,PollenData$Pollen.Score, fixed = TRUE)
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
PollenData$Pollen.Score <- gsub("?",NA,PollenData$Pollen.Score, fixed = TRUE)
print(PollenData$Pollen.Score)
PollenData$Pollen.Colour <- gsub("?",NA,PollenData$Pollen.Score, fixed = TRUE)
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
PollenData <- read.csv("Pollen_score_colour.csv")
ForagingData <- read.csv("Foraging_duration.csv")
PollenData$Pollen.Colour <- gsub("?",NA,PollenData$Pollen.Colour, fixed = TRUE)
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
print(PollenData$Pollen.Score)
print(pColor)
print(For)
print(ForagingData)
pColor <- PollenData$Pollen.Colour
PollenData$Pollen.Colour <- gsub("?",NA,PollenData$Pollen.Colour, fixed = TRUE)
PollenData <- na.omit(PollenData)
pColor <- PollenData$Pollen.Colour
pScore <- PollenData$Pollen.Score
