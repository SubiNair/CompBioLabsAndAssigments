return(fibSeq)
}
fibonacci(5, 1)
fibonacci <- function(n, starter = 1) {
if(n <= 0) {
print("Please enter a positive value to commence!")
}
fibSeq <- rep(0, n)
nextnum <- 1
fibSeq[1] <- starter
fibSeq[2] <- nextnum
for (i in seq(3,n)) {
newval <- nextnum + starter
fibSeq[i] <- newval
}
return(fibSeq)
}
fibonacci(5, 1)
fibonacci <- function(n, starter = 1) {
if(n <= 0) {
print("Please enter a positive value to commence!")
}
fibSeq <- rep(0, n)
nextnum <- 1
fibSeq[1] <- starter
fibSeq[2] <- nextnum
for (i in seq(3,n)) {
newval <- nextnum + starter
fibSeq[i] <- newval
starter <- nextnum
nextnum <- newval
}
return(fibSeq)
}
fibonacci(5, 1)
fibonacci(12, 1)
fibonacci(12, 0)
fibonacci(1, 1)
#Lab 7 -- Surabhi Nair
#PROBLEM 1
#Fibonacci sequence function
fibonacci <- function(n, starter = 1) {
#Warning in case of a negative value or 0 being entered
if(n <= 0) {
print("WARNING: Negative value or zero entered! Please enter a positive value to commence!")
}
fibSeq <- rep(0, n)
nextnum <- 1
if(n < 3) {
if(n == 1){
fibSeq[1] <- starter
return(fibSeq)
}
if(n == 2) {
fibSeq[1] <- starter
fibSeq[2] <- nextnum
return(fibSeq)
}
}
fibSeq[1] <- starter
fibSeq[2] <- nextnum
for (i in seq(3,n)) {
newval <- nextnum + starter
fibSeq[i] <- newval
starter <- nextnum
nextnum <- newval
}
return(fibSeq)
}
fibonacci(1, 1)
fibonacci(2, 1)
fibonacci(2, 0)
fibonacci(1, 0)
#Lab 7 -- Surabhi Nair
#PROBLEM 1
#Fibonacci sequence function
fibonacci <- function(n, starter = 1) {
#Warning in case of a negative value or 0 being entered
if(n <= 0) {
print("WARNING: Negative value or zero entered! Please enter a positive value to commence!")
}
#Regardless of starting position, the next number is 1
#We can create a vector of 0s the size of n
fibSeq <- rep(0, n)
nextnum <- 1
#To handle an n smaller than 3
#If they only want one value then return the vector with just the starter
#If they enter n = 2, then return the starter and the next num
#For every other value
fibSeq[1] <- starter
if(n == 1){
return(fibSeq)
}
fibSeq[2] <- nextnum
if(n == 2) {
return(fibSeq)
}
for (i in seq(3,n)) {
newval <- nextnum + starter
fibSeq[i] <- newval
starter <- nextnum
nextnum <- newval
}
return(fibSeq)
}
fibonacci(1, 0)
fibonacci(1, 1)
fibonacci(2, 1)
fibonacci(2, 0)
fibonacci(12, 0)
fibonacci(12, 1)
fibonacci(144, 1)
fibonacci(14, 1)
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
n <- rep(0, numberOfGens)
}
#PROBLEM 2
#Logistic growth model
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
#Warning for negative arguments where not possible
if(iSize < 0) {
print("ERROR: Initial Population MUST be 0 or greater!")
}
if(numberOfGens < 0) {
print("ERROR: Number of Generations MUST be 0 or greater!")
}
if(K < 0) {
print("ERROR: Carrying Capacity MUST be 0 or greater!")
}
#First lets create a vector n that will hold our abundance values
#The first value will be the initial size of the population
n <- rep(0, numberOfGens)
n[1] <- iSize
#Now we can loop through and calculate each value
for(t in seq(2,numberOfGens)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(n, xlab = "Number of Generations", ylab = "Abundance")
}
#PROBLEM 2
#Logistic growth model
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
#Warning for negative arguments where not possible
if(iSize < 0) {
print("ERROR: Initial Population MUST be 0 or greater!")
}
if(numberOfGens < 0) {
print("ERROR: Number of Generations MUST be 0 or greater!")
}
if(K < 0) {
print("ERROR: Carrying Capacity MUST be 0 or greater!")
}
#First lets create a vector n that will hold our abundance values
#The first value will be the initial size of the population
n <- rep(0, numberOfGens)
n[1] <- iSize
#Now we can loop through and calculate each value
for(t in seq(2,numberOfGens)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
finalPlot <- plot(n, xlab = "Number of Generations", ylab = "Abundance")
return(finalPlot)
}
finalPlot <- plot(n, numberofGens, xlab = "Number of Generations", ylab = "Abundance")
return(finalPlot)
}
finalPlot <- plot(n, numberofGens, xlab = "Number of Generations", ylab = "Abundance")
return(finalPlot)
#PROBLEM 2
#Logistic growth model
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
#Warning for negative arguments where not possible
if(iSize < 0) {
print("ERROR: Initial Population MUST be 0 or greater!")
}
if(numberOfGens < 0) {
print("ERROR: Number of Generations MUST be 0 or greater!")
}
if(K < 0) {
print("ERROR: Carrying Capacity MUST be 0 or greater!")
}
#First lets create a vector n that will hold our abundance values
#The first value will be the initial size of the population
n <- rep(0, numberOfGens)
n[1] <- iSize
#Now we can loop through and calculate each value
for(t in seq(2,numberOfGens)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
timeGen <- seq(1,numberOfGens)
finalPlot <- plot(n, timeGen)
return(finalPlot)
}
print(finalPlot)
logGrowth(1000,30,100000,1.5)
#PROBLEM 2
#Logistic growth model
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
#Warning for negative arguments where not possible
if(iSize < 0) {
print("ERROR: Initial Population MUST be 0 or greater!")
}
if(numberOfGens < 0) {
print("ERROR: Number of Generations MUST be 0 or greater!")
}
if(K < 0) {
print("ERROR: Carrying Capacity MUST be 0 or greater!")
}
#First lets create a vector n that will hold our abundance values
#The first value will be the initial size of the population
n <- rep(0, numberOfGens)
n[1] <- iSize
#Now we can loop through and calculate each value
for(t in seq(2,numberOfGens)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
timeGen <- seq(1,numberOfGens)
finalPlot <- plot(n, timeGen)
return(n)
}
logGrowth(1000,30,100000,1.5)
logGrowth(1000,30,100000,2)
logGrowth(1000,30,10000,2)
logGrowth(1000,30,1000,2)
logGrowth(100,30,1000,.43)
timeGen <- seq(1,numberOfGens)
finalPlot <- plot(timeGen, n, xlab = "Generations", ylab = "Abundances")
return(n)
#PROBLEM 2
#Logistic growth model
logGrowth <- function(iSize = 100, numberOfGens = 20, K = 500, r = 1.5) {
#Warning for negative arguments where not possible
if(iSize < 0) {
print("ERROR: Initial Population MUST be 0 or greater!")
}
if(numberOfGens < 0) {
print("ERROR: Number of Generations MUST be 0 or greater!")
}
if(K < 0) {
print("ERROR: Carrying Capacity MUST be 0 or greater!")
}
#First lets create a vector n that will hold our abundance values
#The first value will be the initial size of the population
n <- rep(0, numberOfGens)
n[1] <- iSize
#Now we can loop through and calculate each value
for(t in seq(2,numberOfGens)) {
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
#We can make a y axis with a sequence from 1 to the number of Gens
#we print a plot and return the final abundances
timeGen <- seq(1,numberOfGens)
finalPlot <- plot(timeGen, n, xlab = "Generations", ylab = "Abundances")
return(n)
}
logGrowth(100,30,1000,.43)
logGrowth(100,30,1000,1.5)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <-read.table(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
etwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
print(adjacencyMatrix)
matrixToPairwise <- function(inputmatrix) {
#for(i in seq(1,))
print(ncol(inputmatrix))
print(nrow(inputmatrix))
}
matrixToPairwise(adjacencyMatrix)
matrixToPairwise <- function(inputmatrix) {
#for(i in seq(1,))
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
}
View(matrixToPairwise)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
pairwiseMatrix <- matrix(0,nrow = 0, ncol = 3)
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
}
}
}
}
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
newrows <- length(which(inputmatrix == 1))
print(newrows)
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
print("tbc")
}
}
}
}
matrixToPairwise(adjacencyMatrix)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
newrows <- length(which(inputmatrix == 1))
print(newrows)
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
return(pairwiseMatrix)
}
matrixToPairwise(adjacencyMatrix)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
#We are trying to determine how many actual rows we need
#To preallocate a new pairwise matrix
#So we find the amount of actual intereactions within the input
newrows <- length(which(inputmatrix == 1))
#We then use that to determine how many rows we need
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
#We can replace the entire row of the pairwise matrix
#With the row, column, and interaction in the input matrix
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
#return the pairwise matrix
return(pairwiseMatrix)
matrixToPairwise(adjacencyMatrix)
matrixToPairwise(adjacencyMatrix)
#PROBLEM 3
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
#We are trying to determine how many actual rows we need
#To preallocate a new pairwise matrix
#So we find the amount of actual intereactions within the input
newrows <- length(which(inputmatrix == 1))
#We then use that to determine how many rows we need
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
#We can replace the entire row of the pairwise matrix
#With the row, column, and interaction in the input matrix
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
#return the pairwise matrix
return(pairwiseMatrix)
}
matrixToPairwise(adjacencyMatrix)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
adjacencyMatrix <- read.csv(file.choose(), header=T)
View(adjacencyMatrix)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
#We are trying to determine how many actual rows we need
#To preallocate a new pairwise matrix
#So we find the amount of actual intereactions within the input
newrows <- length(which(inputmatrix == 1))
#We then use that to determine how many rows we need
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
#We can replace the entire row of the pairwise matrix
#With the row, column, and interaction in the input matrix
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
#return the pairwise matrix
return(pairwiseMatrix)
}
View(adjacencyMatrix)
#PROBLEM 3
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
#We are trying to determine how many actual rows we need
#To preallocate a new pairwise matrix
#So we find the amount of actual intereactions within the input
newrows <- length(which(inputmatrix == 1))
#We then use that to determine how many rows we need
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
#We can replace the entire row of the pairwise matrix
#With the row, column, and interaction in the input matrix
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
#return the pairwise matrix
return(pairwiseMatrix)
}
return(pairwiseMatrix)
matrixToPairwise(adjacencyMatrix)
matrixToPairwise(adjacencyMatrix)
adjacencyMatrix <- read.csv(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab06")
adjacencyMatrix <- read.csv(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
adjacencyMatrix <- )
adjacencyMatrix <- read.csv(file.choose(), header=T)
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab07")
adjacencyMatrix <- read.csv(file.choose(), header=T)
matrixToPairwise <- function(inputmatrix) {
columns <- ncol(inputmatrix)
rows <- nrow(inputmatrix)
#Make sure it is square
if(rows != columns) {
print("Matrix not square, try again!")
}
#We are trying to determine how many actual rows we need
#To preallocate a new pairwise matrix
#So we find the amount of actual intereactions within the input
newrows <- length(which(inputmatrix == 1))
#We then use that to determine how many rows we need
pairwiseMatrix <- matrix(0,nrow = newrows, ncol = 3)
#This is going to be used to move down the rows of the new matrix
countrow <- 1
#Going through our input matrix and extracting anything with an interaction
for(i in seq(1,rows)) {
for(j in seq(1,columns)) {
if(inputmatrix[i,j] == 1) {
#We can replace the entire row of the pairwise matrix
#With the row, column, and interaction in the input matrix
pairwiseMatrix[countrow, ] <- c(i,j,inputmatrix[i,j])
countrow <- countrow + 1
}
}
}
#return the pairwise matrix
return(pairwiseMatrix)
}
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab06")
matrixToPairwise(adjacencyMatrix)
