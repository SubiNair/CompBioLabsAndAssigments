chipBags <- 5
expectedConsumption <- 0.4
expectedConsump <- 0.4
#lab step #3
#These are variables storing the number of guests & how many bags of chips we have
numOfGuests <- 8
chipBags <- 5
#lab step #5: Variable storing how many bags of chips you expect each person to eat
expectedConsump <- 0.4
9 * 0.4
3.6 * 5
5 / 3.6
totalConsump <- (numOfGuests + 1) * expectedConsump
remainingChips <- chipBags * totalConsump
remainingChips <- chipBags / totalConsump
rm(expectedConsumption)
#lab step #3
#These are variables storing the number of guests & how many bags of chips we have
numOfGuests <- 8
chipBags <- 5
#lab step #5: Variable storing how many bags of chips you expect each person to eat
expectedConsump <- 0.4
#lab step #7: totalConsump to calculate how many chip bags you and the guest will eat
#remainingChips is to then see
totalConsump <- (numOfGuests + 1) * expectedConsump
remainingChips <- chipBags / totalConsump
Self <- c(7, 6, 5, 1, 2, 3, 4)
Penny <- c(5, 7, 6, 3, 1, 2, 4)
Jenny <- c(4, 3, 2, 7, 6, 5, 1)
Lenny <- c(1, 7, 3, 4, 6, 5, 2)
Stewie <- c(6, 7, 5, 4, 3, 1, 2)
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
filmRankTable <- (Self, Penny, Jenny, Lenny, Stewie)
filmRankTable <- cbind(Self, Penny, Jenny, Lenny, Stewie)
filmRankTable
str(PennyIV)
str(Penny)
str(filmRankTable)
filmDataFrame <- data.frame(Self, Penny, Jenny, Lenny, Stewie)
filmAsDataFrame <- as.data.frame(Self, Penny, Jenny, Lenny, Stewie)
str(filmDataFrame)
str(filmAsDataFrame)
str(filmAsDataFrame)
str(filmDataFrame)
str(filmDataFrame)
str(filmAsDataFrame)
dim(filmDataFrame)
dim(filmAsDataFrame)
typeof(filmDataFrame)
typeof(filmAsDataFrame)
typeof(filmRankTable)
dim(filmRankTable)
filmAsDataFrame <- as.data.frame(filmRankTable)
str(filmDataFrame)
str(filmAsDataFrame)
dim(filmDataFrame)
dim(filmAsDataFrame)
dim(filmRankTable)
typeof(filmDataFrame)
typeof(filmAsDataFrame)
typeof(filmRankTable)
filmRankTable == filmDataFrame
filmDataFrame == filmAsDataFrame
filmRankTable == filmAsDataFrame
epNames <- c("I", "II", "III", "IV", "V", "VI", "VII")
row.names(filmDataFrame) <- epNames
filmDataFrame
row.names(filmAsDataFrame) <- epNames
row.names(filmRankTable) <- epNames
filmRankTable
filmAsDataFrame
filmRankTable[3,]
filmDataFrame[,4]
filmDataFrame[5,1]
filmDataFrame[2,2]
filmDataFrame[4:6,]
filmDataFrame[(2,5,7),]
filmDataFrame[c(2,5,7),]
filmDataFrame[c(4,6),c(2,3,5)]
swapRank <- filmDataFrame[2,4]
filmDataFrame[5,4]
filmDataFrame[2,4] == filmDataFrame[5,4]
filmDataFrame[2,4] <- filmDataFrame[5,4]
filmDataFrame[5,4] <- swapRank
filmDataFrame
filmRankTable["III", "Penny"]
filmDataFrame["III", "Penny"]
swapRank <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank
filmDataFrame
swapRank3 <- filmDataFrame$Lenny[2]
swapRank2 <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank2
filmDataFrame$Lenny[2] <- filmDataFrame$Lenny[5]
filmDataFrame$Lenny[5] <- swapRank3
filmDataFrame
swapRank3 <- filmDataFrame$Lenny[2]
filmDataFrame$Lenny[2] <- filmDataFrame$Lenny[5]
filmDataFrame$Lenny[5] <- swapRank3
filmDataFrame
swapRank2 <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank2
filmDataFrame
swapRank <- filmDataFrame[2,4]
filmDataFrame[2,4] <- filmDataFrame[5,4]
filmDataFrame[5,4] <- swapRank
filmDataFrame <- data.frame(Self, Penny, Jenny, Lenny, Stewie)
swapRank <- filmDataFrame[2,4]
filmDataFrame[2,4] <- filmDataFrame[5,4]
filmDataFrame[5,4] <- swapRank
filmAsDataFrame
swapRank2 <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank2
filmDataFrame
#PART II
#lab step #8
#vectors containing every persons rankings of the films, with the first element corresponding to Episode I and so on
Self <- c(7, 6, 5, 1, 2, 3, 4)
Penny <- c(5, 7, 6, 3, 1, 2, 4)
Jenny <- c(4, 3, 2, 7, 6, 5, 1)
Lenny <- c(1, 7, 3, 4, 6, 5, 2)
Stewie <- c(6, 7, 5, 4, 3, 1, 2)
#lab step #9
#variables that store Penny and Lenny's ranking of the 4th Episode
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
#lab step #10
#Concatenating all of the rankings into filmRankTable
filmRankTable <- cbind(Self, Penny, Jenny, Lenny, Stewie)
#lab step #11
#This is to see the structure of the following variables and data object
str(PennyIV)
str(Penny)
str(filmRankTable)
#The structure for PennyIV and Penny is num, for filmRankTable there are multiple results
#It says the following:
#num [1:7, 1:5] 7 6 5 1 2 3 4 5 7 6 ...
#- attr(*, "dimnames")=List of 2
#..$ : NULL
#..$ : chr [1:5] "Self" "Penny" "Jenny" "Lenny"
#The NULL is due to not having names for the rows, but the columns have names of type chr
filmDataFrame <- data.frame(Self, Penny, Jenny, Lenny, Stewie)
filmAsDataFrame <- as.data.frame(filmRankTable)
str(filmDataFrame)
str(filmAsDataFrame)
dim(filmDataFrame)
dim(filmAsDataFrame)
dim(filmRankTable)
typeof(filmDataFrame)
typeof(filmAsDataFrame)
typeof(filmRankTable)
#When using typeof() both of the data frames are lists, but the cbind matrix gives you "double"
#dimensions simply provides you with the number of rows and then columns which in every case is 7 5
#structure for all of these says num
filmRankTable == filmDataFrame
filmDataFrame == filmAsDataFrame
filmRankTable == filmAsDataFrame
# == confirms that the values are the same throughout the matrix and the data frames
# All values are listed as TRUE
#lab step #14
#We are making a vector of the Episode names
epNames <- c("I", "II", "III", "IV", "V", "VI", "VII")
#Now we can add this to the data frames
row.names(filmDataFrame) <- epNames
row.names(filmAsDataFrame) <- epNames
row.names(filmRankTable) <- epNames
#Accessing elements of matrices and data frames
#step 16
filmRankTable[3,]
#step 17
filmDataFrame[,4]
#step 18
filmDataFrame[5,1]
#step 19
filmDataFrame[2,2]
#step 20
filmDataFrame[4:6,]
#step 21 -- accessing specific rows
filmDataFrame[c(2,5,7),]
#step 22 -- accessing specific rows and columns
filmDataFrame[c(4,6),c(2,3,5)]
swapRank <- filmDataFrame[2,4]
filmDataFrame[2,4] <- filmDataFrame[5,4]
filmDataFrame[5,4] <- swapRank
filmDataFrame
swapRank2 <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank2
filmDataFrame
swapRank3 <- filmDataFrame$Lenny[2]
filmDataFrame$Lenny[2] <- filmDataFrame$Lenny[5]
filmDataFrame$Lenny[5] <- swapRank3
filmDataFrame
swapRank2 <- filmDataFrame["V", "Lenny"]
filmDataFrame["V", "Lenny"] <- filmDataFrame["II", "Lenny"]
filmDataFrame["II", "Lenny"] <- swapRank2
filmDataFrame
swapRank3 <- filmDataFrame$Lenny[2]
filmDataFrame$Lenny[2] <- filmDataFrame$Lenny[5]
filmDataFrame$Lenny[5] <- swapRank3
filmDataFrame
x <- 9
if (x > 5) {
print("The value of x is greater than 5")
} else {
print("The value of x is less than or equal to 5")
}
setwd("/Users/subi/Desktop/CompBioLabsAndAssignments/Lab05")
data <- read.csv("Vector1.csv")
print(data)
for (i in data) {
if (i < 0) {
i = "NA"
}
}
for (i in data) {
print(i)
}
for (i in data) {
if (i < 0) {
data[i] <- "NA"
} else {
data[i]
}
}
print dara
print data
print (data)
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
data[i] <- "NA"
} else {
data[i]
}
}
for (i in data) {
if (data[i] < 0) {
data[i] <- "NA"
} else {
data[i]
}
}
data <- read.csv("Vector1.csv")
for (i in data) {
if (data[i] < 0) {
data[i] <- "NA"
} else {
data[i]
}
}
for (i in data) {
if (data[i] < 0) {
data[i] <- "NA"
}
}
for (i in data) {
if (data[i] < 0) {
print(data[i])
}
}
or (i in data) {
if (i < 0) {
print(data[i])
}
}
for (i in data) {
if (i < 0) {
print(data[i])
}
}
for (i in data) {
if (i < 0) {
print(data[i])
}
}
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
print(data[i])
}
}
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
print(i)
}
}
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
i <- "NA"
print(i)
}
}
print(data)
for (i in data) {
if (i < 0) {
i <- "NA"
print(i)
}
}
for (i in data) {
if (i < 0) {
i <- NA
print(i)
}
}
print(data)
for (i in data) {
if (i < 0) {
i <- NA
print(i)
}
}
print(data)
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
i <- NA
}
}
print(data)
for (i in data) {
if (i < 0) {
i <- NA
} else {
}
}
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
i <- NA
} else {
}
}
print(data)
data <- read.csv("Vector1.csv")
for (i in data) {
if (i < 0) {
print(i)
}
}
for (i in data) {
if (data[i] < 0) {
print(i)
}
}
for (i in data) {
print(i)
}
clear
for (i in data) {
print(data[i])
}
data <- read.csv("Vector1.csv")
typeof(data)
data <- c(read.csv("Vector1.csv"))
typeof(data)
data <- read.csv("Vector1.csv")
data <- c(read.csv("Vector1.csv"))
for (i in data) {
print(i)
}
for (i in data) {
print(data[i])
}
print(data[1])
print(data[2])
print(data[1])
data <- read.csv("Vector1.csv")
print(data[1, 2])
print(data[1, 1])
print(data[2, 1])
for (i in data) {
if (data[i, 1] < 0) {
data[i, 1] <- NA
}
}
for (i in data[i, 1]) {
if (data[i, 1] < 0) {
data[i, 1] <- NA
}
}
for (i in length(data$x)) {
print(x)
}
for (i in length(data$x)) {
print(i)
}
for (i in seq(1,length(data$x))) {
print(i)
}
for (i in seq(1,length(data$x))) {
if (data[i, 1] < 0) {
print(i)
}
}
for (i in seq(1,length(data$x))) {
if (data[i, 1] < 0) {
data[i, 1] <- NA
}
}
print(data)
which(is.na(data))
dataNAVals <- which(is.na(data))
data[dataNAVals, 1] <- 0
print(data)
typeof(dataNAVals)
str(dataNAVals)
dataFtoH <- which(100 > data > 50)
dataFtoH <- which(100 > data)
dataH <- which(100 > data)
dataF <- which(data > 50)
dataFtoH <- c(dataH,dataF)
dataH <- which(100 > data)
dataF <- which(data > 50)
dataFtoH <- c(dataH,dataF)
print(dataFtoH)
dataFtoH <- which(100 > data & data > 50)
data50_100 <- data[dataFtoH, 1]
print(data50_100)
rm(dataF)
rm(dataH)
co2data <- read.csv("CO2_data_cut_paste.csv")
print(co2data)
co2data <- co2data$Gas
print(co2data)
co2data <- read.csv("CO2_data_cut_paste.csv")
co2Gas <- which(co2data$Gas > 0)
co2Year <- which(co2Gas)
co2data <- read.csv("CO2_data_cut_paste.csv")
co2Gas <- which(co2data$Gas > 0)
co2Year <- which(co2Gas)
co2Year <- which(co2data[co2Gas])
co2Year <- which(co2data$Year[co2Gas])
co2Year <- which(co2data$Year[co2Gas])
co2Year <- co2data$Year[co2Gas]
print(co2Year)
co2FirstYear <- co2Gas[1]
print(co2FirstYear)
co2FirstYear <- co2Year[1]
co2FirstYear <- co2Year[1]
print(co2FirstYear)
print(co2FirstYear)
co2Total <- which(co2data$Total > 200 & co2data$Total < 300)
co2TotalYears <- co2data$Year[co2Total]
print(co2TotalYears)
print(co2TotalYears)
time <- rep(0, totalGenerations)
totalGenerations <- 1000
initPrey <- 100     # initial prey abundance
initPred <- 10      # initial predator abundance
a <- 0.01       # attack rate
r <- 0.2        # growth rate of prey
m <- 0.05       # mortality rate of predators
k <- 0.1        # conversion constant of prey into predators
time <- rep(0, totalGenerations)
print(data50_100)
time <- rep(0, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
time <- seq(1, totalGenerations)
for (t in seq(2,length(time))) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
for (t in seq(2,length(time))) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(!is.finite(n)){
rem <- which(!is.finite(n))
n[rem] <- -1
}
}
for (t in seq(2,length(time))) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(!is.finite(n)){
n[!is.finite(n)] <- -1
}
}
for (t in seq(2,length(time))) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(!is.finite(n)){
n[t] <- 1
}
}
time[1]
seq(2,length(time))
print(n)
#This is the loop where we implement the calculations
for (t in seq(2,length(time))) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (n[t] < 0) {
n[t] <- 0
}
if (p[t] < 0) {
p[t] <- 0
}
}
print(n)
